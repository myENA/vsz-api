package api

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/myENA/vsz-api/validators"
	"net/http"
)

// This file is auto-generated
// Generation Date: 2018-03-16T16:29:52-0500
// API Version: v5

type IdentityAPI struct {
	client *Client
}

// IdentityGuestPassDeleteMultipleIdentityGuestPassesDelete: Use this API command to delete multiple identity guest passes.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - []byte: Any bytes to be found in response body
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityGuestPassDeleteMultipleIdentityGuestPassesDelete(ctx context.Context) (*http.Response, []byte, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	request := NewRequest("DELETE", "/v5_0/identity/guestpass", true)
	return i.client.Ensure(ctx, request, 204, nil)
}

type (
	IdentityGuestPassRetrieveIdentityGuestPassListGet200ResponseListSlice []*IdentityGuestPassRetrieveIdentityGuestPassListGet200ResponseList

	IdentityGuestPassRetrieveIdentityGuestPassListGet200ResponseListMaxDevices struct {
		MaxDevicesAllowed *string  `json:"maxDevicesAllowed,omitempty"`
		MaxDevicesNumber  *float64 `json:"maxDevicesNumber,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListGet200ResponseListPassValidFor struct {
		ExpirationUnit  *string  `json:"expirationUnit,omitempty"`
		ExpirationValue *float64 `json:"expirationValue,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListGet200ResponseListSessionDuration struct {
		RequireLoginAgain *bool    `json:"requireLoginAgain,omitempty"`
		SessionUnit       *string  `json:"sessionUnit,omitempty"`
		SessionValue      *float64 `json:"sessionValue,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListGet200ResponseListWlan struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListGet200ResponseListZone struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListGet200ResponseList struct {
		AutoGeneratedPassword *bool                                                                            `json:"autoGeneratedPassword,omitempty"`
		DomainID              *string                                                                          `json:"domainId,omitempty"`
		ExpirationDate        *string                                                                          `json:"expirationDate,omitempty"`
		GeneratedOn           *string                                                                          `json:"generatedOn,omitempty"`
		GuestName             *string                                                                          `json:"guestName,omitempty"`
		ID                    *string                                                                          `json:"id,omitempty"`
		Key                   *string                                                                          `json:"key,omitempty"`
		MaxDevices            *IdentityGuestPassRetrieveIdentityGuestPassListGet200ResponseListMaxDevices      `json:"maxDevices,omitempty"`
		PassEffectSince       *string                                                                          `json:"passEffectSince,omitempty"`
		PassUseDays           *float64                                                                         `json:"passUseDays,omitempty"`
		PassValidFor          *IdentityGuestPassRetrieveIdentityGuestPassListGet200ResponseListPassValidFor    `json:"passValidFor,omitempty"`
		Remarks               *string                                                                          `json:"remarks,omitempty"`
		SessionDuration       *IdentityGuestPassRetrieveIdentityGuestPassListGet200ResponseListSessionDuration `json:"sessionDuration,omitempty"`
		Ssid                  *string                                                                          `json:"ssid,omitempty"`
		UserID                *string                                                                          `json:"userId,omitempty"`
		Wlan                  *IdentityGuestPassRetrieveIdentityGuestPassListGet200ResponseListWlan            `json:"wlan,omitempty"`
		WlanRestrition        *string                                                                          `json:"wlanRestrition,omitempty"`
		Zone                  *IdentityGuestPassRetrieveIdentityGuestPassListGet200ResponseListZone            `json:"zone,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListGet200Response struct {
		Extra      *json.RawMessage                                                      `json:"extra,omitempty"`
		FirstIndex *int                                                                  `json:"firstIndex,omitempty"`
		HasMore    *bool                                                                 `json:"hasMore,omitempty"`
		List       IdentityGuestPassRetrieveIdentityGuestPassListGet200ResponseListSlice `json:"list,omitempty"`
		TotalCount *int                                                                  `json:"totalCount,omitempty"`
	}
)

// IdentityGuestPassRetrieveIdentityGuestPassListGet: Use this API command to retrieve a list of identity guest pass.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
//
// Optional Parameter Map:
// - index (integer): The index of the first entry to be retrieved.
// - listSize (integer): The maximum number of entries to be retrieved.
// - timeZone (string): Display created date and time by specified time zone.
// - wlan (integer): filter identity guest pass list by wlan id.
// - displayName (string): filter identity guest pass list by display name.
// - expirationFrom (string): filter identity guest pass list by expiration date and time. The start time of expiration date and time.The format is yyyy-MM-dd HH:mm:ss.
// - expirationTo (string): filter identity guest pass list by expiration date and time. The end time of expiration date and time.The format is yyyy-MM-dd HH:mm:ss.
// - generatedTimeFrom (string): filter identity guest pass list by generated date and time. The start time of generated date and time.The format is yyyy-MM-dd HH:mm:ss.
// - generatedTimeTo (string): filter identity guest pass list by generated date and time. The end time of generated date and time.The format is yyyy-MM-dd HH:mm:ss.
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentityGuestPassRetrieveIdentityGuestPassListGet200Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityGuestPassRetrieveIdentityGuestPassListGet(ctx context.Context, optionalParams map[string]string) (*http.Response, *IdentityGuestPassRetrieveIdentityGuestPassListGet200Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	index, ok := optionalParams["index"]
	if ok {
		err = validators.StrIsPositiveInt(index)
		if nil != err {
			return nil, nil, fmt.Errorf("parameter \"index\" failed validation check: %s", err)
		}
	} else {
		index = "0"
	}
	listSize, ok := optionalParams["listSize"]
	if ok {
		err = validators.StrIsPositiveInt(listSize)
		if nil != err {
			return nil, nil, fmt.Errorf("parameter \"listSize\" failed validation check: %s", err)
		}
	} else {
		listSize = "100"
	}
	timeZone, ok := optionalParams["timeZone"]
	if !ok {
		timeZone = "UTC"
	}
	wlan, ok := optionalParams["wlan"]
	if ok {
		err = validators.StrIsPositiveInt(wlan)
		if nil != err {
			return nil, nil, fmt.Errorf("parameter \"wlan\" failed validation check: %s", err)
		}
	}
	request := NewRequest("GET", "/v5_0/identity/guestpass", true)
	request.SetQueryParameter("index", index)
	request.SetQueryParameter("listSize", listSize)
	request.SetQueryParameter("timeZone", timeZone)
	request.SetQueryParameter("wlan", wlan)
	request.SetQueryParameter("displayName", optionalParams["displayName"])
	request.SetQueryParameter("expirationFrom", optionalParams["expirationFrom"])
	request.SetQueryParameter("expirationTo", optionalParams["expirationTo"])
	request.SetQueryParameter("generatedTimeFrom", optionalParams["generatedTimeFrom"])
	request.SetQueryParameter("generatedTimeTo", optionalParams["generatedTimeTo"])
	out := &IdentityGuestPassRetrieveIdentityGuestPassListGet200Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 200, out)
	return httpResponse, out, err
}

type (
	IdentityGuestPassGenerateIdentityGuestPassPostRequestMaxDevices struct {
		MaxDevicesAllowed *string  `json:"maxDevicesAllowed,omitempty"`
		MaxDevicesNumber  *float64 `json:"maxDevicesNumber,omitempty"`
	}

	IdentityGuestPassGenerateIdentityGuestPassPostRequestPassValidFor struct {
		ExpirationUnit  *string  `json:"expirationUnit,omitempty"`
		ExpirationValue *float64 `json:"expirationValue,omitempty"`
	}

	IdentityGuestPassGenerateIdentityGuestPassPostRequestSessionDuration struct {
		RequireLoginAgain *bool    `json:"requireLoginAgain,omitempty"`
		SessionUnit       *string  `json:"sessionUnit,omitempty"`
		SessionValue      *float64 `json:"sessionValue,omitempty"`
	}

	IdentityGuestPassGenerateIdentityGuestPassPostRequestWlan struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityGuestPassGenerateIdentityGuestPassPostRequestZone struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityGuestPassGenerateIdentityGuestPassPostRequest struct {
		AutoGeneratedPassword *bool                                                                 `json:"autoGeneratedPassword,omitempty"`
		DomainID              *string                                                               `json:"domainId,omitempty"`
		GuestName             *string                                                               `json:"guestName,omitempty"`
		MaxDevices            *IdentityGuestPassGenerateIdentityGuestPassPostRequestMaxDevices      `json:"maxDevices,omitempty"`
		NumberOfPasses        *float64                                                              `json:"numberOfPasses,omitempty"`
		PassEffectSince       *string                                                               `json:"passEffectSince,omitempty"`
		PassUseDays           *float64                                                              `json:"passUseDays,omitempty"`
		PassValidFor          *IdentityGuestPassGenerateIdentityGuestPassPostRequestPassValidFor    `json:"passValidFor,omitempty"`
		PassValue             *string                                                               `json:"passValue,omitempty"`
		Remarks               *string                                                               `json:"remarks,omitempty"`
		SessionDuration       *IdentityGuestPassGenerateIdentityGuestPassPostRequestSessionDuration `json:"sessionDuration,omitempty"`
		Wlan                  *IdentityGuestPassGenerateIdentityGuestPassPostRequestWlan            `json:"wlan,omitempty"`
		Zone                  *IdentityGuestPassGenerateIdentityGuestPassPostRequestZone            `json:"zone,omitempty"`
	}

	IdentityGuestPassGenerateIdentityGuestPassPost201Response struct {
		ID *string `json:"id,omitempty"`
	}
)

// IdentityGuestPassGenerateIdentityGuestPassPost: Use this API command to generate identity guest pass.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - requestBody: *IdentityGuestPassGenerateIdentityGuestPassPostRequest
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentityGuestPassGenerateIdentityGuestPassPost201Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityGuestPassGenerateIdentityGuestPassPost(ctx context.Context, requestBody *IdentityGuestPassGenerateIdentityGuestPassPostRequest) (*http.Response, *IdentityGuestPassGenerateIdentityGuestPassPost201Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	request := NewRequest("POST", "/v5_0/identity/guestpass/generate", true)
	err = request.SetBodyModel(requestBody)
	if err != nil {
		return nil, nil, err
	}
	out := &IdentityGuestPassGenerateIdentityGuestPassPost201Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 201, out)
	return httpResponse, out, err
}

type (
	IdentityGuestPassRetrieveIdentityGuestPassListPostRequestAttributesSlice []*string

	IdentityGuestPassRetrieveIdentityGuestPassListPostRequestExtraFiltersSlice []*IdentityGuestPassRetrieveIdentityGuestPassListPostRequestExtraFilters

	IdentityGuestPassRetrieveIdentityGuestPassListPostRequestExtraFilters struct {
		Operator *string `json:"operator,omitempty"`
		Type     *string `json:"type,omitempty"`
		Value    *string `json:"value,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListPostRequestExtraNotFiltersSlice []*IdentityGuestPassRetrieveIdentityGuestPassListPostRequestExtraNotFilters

	IdentityGuestPassRetrieveIdentityGuestPassListPostRequestExtraNotFilters struct {
		Type  *string `json:"type,omitempty"`
		Value *string `json:"value,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListPostRequestExtraTimeRange struct {
		End      *float64 `json:"end,omitempty"`
		Field    *string  `json:"field,omitempty"`
		Interval *float64 `json:"interval,omitempty"`
		Start    *float64 `json:"start,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListPostRequestFiltersSlice []*IdentityGuestPassRetrieveIdentityGuestPassListPostRequestFilters

	IdentityGuestPassRetrieveIdentityGuestPassListPostRequestFilters struct {
		Operator *string `json:"operator,omitempty"`
		Type     *string `json:"type,omitempty"`
		Value    *string `json:"value,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListPostRequestFullTextSearchFieldsSlice []*string

	IdentityGuestPassRetrieveIdentityGuestPassListPostRequestFullTextSearch struct {
		Fields IdentityGuestPassRetrieveIdentityGuestPassListPostRequestFullTextSearchFieldsSlice `json:"fields,omitempty"`
		Type   *string                                                                            `json:"type,omitempty"`
		Value  *string                                                                            `json:"value,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListPostRequestOptionsGuestPassExpiration struct {
		End      *float64 `json:"end,omitempty"`
		Interval *float64 `json:"interval,omitempty"`
		Start    *float64 `json:"start,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListPostRequestOptionsLocalUserAuditTime struct {
		End      *float64 `json:"end,omitempty"`
		Interval *float64 `json:"interval,omitempty"`
		Start    *float64 `json:"start,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListPostRequestOptions struct {
		INCLUDERBACMETADATA           *bool                                                                                `json:"INCLUDE_RBAC_METADATA,omitempty"`
		TENANTID                      *string                                                                              `json:"TENANT_ID,omitempty"`
		AcctIncludeNa                 *bool                                                                                `json:"acct_includeNa,omitempty"`
		AcctTestableOnly              *bool                                                                                `json:"acct_testableOnly,omitempty"`
		AcctType                      *string                                                                              `json:"acct_type,omitempty"`
		AuthHostedAaaSupportedEnabled *bool                                                                                `json:"auth_hostedAaaSupportedEnabled,omitempty"`
		AuthIncludeAdGlobal           *bool                                                                                `json:"auth_includeAdGlobal,omitempty"`
		AuthIncludeGuest              *bool                                                                                `json:"auth_includeGuest,omitempty"`
		AuthIncludeLocalDb            *bool                                                                                `json:"auth_includeLocalDb,omitempty"`
		AuthIncludeNa                 *bool                                                                                `json:"auth_includeNa,omitempty"`
		AuthPlmnIdentifierEnabled     *bool                                                                                `json:"auth_plmnIdentifierEnabled,omitempty"`
		AuthRealmType                 *string                                                                              `json:"auth_realmType,omitempty"`
		AuthTestableOnly              *bool                                                                                `json:"auth_testableOnly,omitempty"`
		AuthType                      *string                                                                              `json:"auth_type,omitempty"`
		ForwardingType                *string                                                                              `json:"forwarding_type,omitempty"`
		GlobalFilterID                *string                                                                              `json:"globalFilterId,omitempty"`
		GuestPassDisplayName          *string                                                                              `json:"guestPass_displayName,omitempty"`
		GuestPassExpiration           *IdentityGuestPassRetrieveIdentityGuestPassListPostRequestOptionsGuestPassExpiration `json:"guestPass_expiration,omitempty"`
		GuestPassWlan                 *string                                                                              `json:"guestPass_wlan,omitempty"`
		InMap                         *bool                                                                                `json:"inMap,omitempty"`
		IncludeSharedResources        *bool                                                                                `json:"includeSharedResources,omitempty"`
		IncludeUsers                  *bool                                                                                `json:"includeUsers,omitempty"`
		LocalUserAuditTime            *IdentityGuestPassRetrieveIdentityGuestPassListPostRequestOptionsLocalUserAuditTime  `json:"localUser_auditTime,omitempty"`
		LocalUserDisplayName          *string                                                                              `json:"localUser_displayName,omitempty"`
		LocalUserFirstName            *string                                                                              `json:"localUser_firstName,omitempty"`
		LocalUserLastName             *string                                                                              `json:"localUser_lastName,omitempty"`
		LocalUserMailAddress          *string                                                                              `json:"localUser_mailAddress,omitempty"`
		LocalUserPrimaryPhoneNumber   *string                                                                              `json:"localUser_primaryPhoneNumber,omitempty"`
		LocalUserStatus               *string                                                                              `json:"localUser_status,omitempty"`
		LocalUserSubscriberType       *string                                                                              `json:"localUser_subscriberType,omitempty"`
		LocalUserUserName             *string                                                                              `json:"localUser_userName,omitempty"`
		LocalUserUserSource           *string                                                                              `json:"localUser_userSource,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListPostRequestSortInfo struct {
		Dir        *string `json:"dir,omitempty"`
		SortColumn *string `json:"sortColumn,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListPostRequest struct {
		Attributes      IdentityGuestPassRetrieveIdentityGuestPassListPostRequestAttributesSlice      `json:"attributes,omitempty"`
		Criteria        *string                                                                       `json:"criteria,omitempty"`
		ExpandDomains   *bool                                                                         `json:"expandDomains,omitempty"`
		ExtraFilters    IdentityGuestPassRetrieveIdentityGuestPassListPostRequestExtraFiltersSlice    `json:"extraFilters,omitempty"`
		ExtraNotFilters IdentityGuestPassRetrieveIdentityGuestPassListPostRequestExtraNotFiltersSlice `json:"extraNotFilters,omitempty"`
		ExtraTimeRange  *IdentityGuestPassRetrieveIdentityGuestPassListPostRequestExtraTimeRange      `json:"extraTimeRange,omitempty"`
		Filters         IdentityGuestPassRetrieveIdentityGuestPassListPostRequestFiltersSlice         `json:"filters,omitempty"`
		FullTextSearch  *IdentityGuestPassRetrieveIdentityGuestPassListPostRequestFullTextSearch      `json:"fullTextSearch,omitempty"`
		Limit           *float64                                                                      `json:"limit,omitempty"`
		Options         *IdentityGuestPassRetrieveIdentityGuestPassListPostRequestOptions             `json:"options,omitempty"`
		Page            *int                                                                          `json:"page,omitempty"`
		Query           *string                                                                       `json:"query,omitempty"`
		SortInfo        *IdentityGuestPassRetrieveIdentityGuestPassListPostRequestSortInfo            `json:"sortInfo,omitempty"`
		Start           *float64                                                                      `json:"start,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListPost200ResponseListSlice []*IdentityGuestPassRetrieveIdentityGuestPassListPost200ResponseList

	IdentityGuestPassRetrieveIdentityGuestPassListPost200ResponseListMaxDevices struct {
		MaxDevicesAllowed *string  `json:"maxDevicesAllowed,omitempty"`
		MaxDevicesNumber  *float64 `json:"maxDevicesNumber,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListPost200ResponseListPassValidFor struct {
		ExpirationUnit  *string  `json:"expirationUnit,omitempty"`
		ExpirationValue *float64 `json:"expirationValue,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListPost200ResponseListSessionDuration struct {
		RequireLoginAgain *bool    `json:"requireLoginAgain,omitempty"`
		SessionUnit       *string  `json:"sessionUnit,omitempty"`
		SessionValue      *float64 `json:"sessionValue,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListPost200ResponseListWlan struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListPost200ResponseListZone struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListPost200ResponseList struct {
		AutoGeneratedPassword *bool                                                                             `json:"autoGeneratedPassword,omitempty"`
		DomainID              *string                                                                           `json:"domainId,omitempty"`
		ExpirationDate        *string                                                                           `json:"expirationDate,omitempty"`
		GeneratedOn           *string                                                                           `json:"generatedOn,omitempty"`
		GuestName             *string                                                                           `json:"guestName,omitempty"`
		ID                    *string                                                                           `json:"id,omitempty"`
		Key                   *string                                                                           `json:"key,omitempty"`
		MaxDevices            *IdentityGuestPassRetrieveIdentityGuestPassListPost200ResponseListMaxDevices      `json:"maxDevices,omitempty"`
		PassEffectSince       *string                                                                           `json:"passEffectSince,omitempty"`
		PassUseDays           *float64                                                                          `json:"passUseDays,omitempty"`
		PassValidFor          *IdentityGuestPassRetrieveIdentityGuestPassListPost200ResponseListPassValidFor    `json:"passValidFor,omitempty"`
		Remarks               *string                                                                           `json:"remarks,omitempty"`
		SessionDuration       *IdentityGuestPassRetrieveIdentityGuestPassListPost200ResponseListSessionDuration `json:"sessionDuration,omitempty"`
		Ssid                  *string                                                                           `json:"ssid,omitempty"`
		UserID                *string                                                                           `json:"userId,omitempty"`
		Wlan                  *IdentityGuestPassRetrieveIdentityGuestPassListPost200ResponseListWlan            `json:"wlan,omitempty"`
		WlanRestrition        *string                                                                           `json:"wlanRestrition,omitempty"`
		Zone                  *IdentityGuestPassRetrieveIdentityGuestPassListPost200ResponseListZone            `json:"zone,omitempty"`
	}

	IdentityGuestPassRetrieveIdentityGuestPassListPost200Response struct {
		Extra      *json.RawMessage                                                       `json:"extra,omitempty"`
		FirstIndex *int                                                                   `json:"firstIndex,omitempty"`
		HasMore    *bool                                                                  `json:"hasMore,omitempty"`
		List       IdentityGuestPassRetrieveIdentityGuestPassListPost200ResponseListSlice `json:"list,omitempty"`
		TotalCount *int                                                                   `json:"totalCount,omitempty"`
	}
)

// IdentityGuestPassRetrieveIdentityGuestPassListPost: Use this API command to retrieve a list of identity guest pass.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - requestBody: *IdentityGuestPassRetrieveIdentityGuestPassListPostRequest
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentityGuestPassRetrieveIdentityGuestPassListPost200Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityGuestPassRetrieveIdentityGuestPassListPost(ctx context.Context, requestBody *IdentityGuestPassRetrieveIdentityGuestPassListPostRequest) (*http.Response, *IdentityGuestPassRetrieveIdentityGuestPassListPost200Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	request := NewRequest("POST", "/v5_0/identity/guestpassList", true)
	err = request.SetBodyModel(requestBody)
	if err != nil {
		return nil, nil, err
	}
	out := &IdentityGuestPassRetrieveIdentityGuestPassListPost200Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 200, out)
	return httpResponse, out, err
}

// IdentityGuestPassImportIdentityGuestPassPost: Use this API command to upload identity guest pass csv file.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - []byte: Any bytes to be found in response body
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityGuestPassImportIdentityGuestPassPost(ctx context.Context) (*http.Response, []byte, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	request := NewRequest("POST", "/v5_0/identity/guestpass/upload", true)
	return i.client.Ensure(ctx, request, 200, nil)
}

type (
	IdentityGuestPassCommonIdentityGuestPassSettingsPostRequestMaxDevices struct {
		MaxDevicesAllowed *string  `json:"maxDevicesAllowed,omitempty"`
		MaxDevicesNumber  *float64 `json:"maxDevicesNumber,omitempty"`
	}

	IdentityGuestPassCommonIdentityGuestPassSettingsPostRequestPassValidFor struct {
		ExpirationUnit  *string  `json:"expirationUnit,omitempty"`
		ExpirationValue *float64 `json:"expirationValue,omitempty"`
	}

	IdentityGuestPassCommonIdentityGuestPassSettingsPostRequestSessionDuration struct {
		RequireLoginAgain *bool    `json:"requireLoginAgain,omitempty"`
		SessionUnit       *string  `json:"sessionUnit,omitempty"`
		SessionValue      *float64 `json:"sessionValue,omitempty"`
	}

	IdentityGuestPassCommonIdentityGuestPassSettingsPostRequestWlan struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityGuestPassCommonIdentityGuestPassSettingsPostRequestZone struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityGuestPassCommonIdentityGuestPassSettingsPostRequest struct {
		DomainID        *string                                                                     `json:"domainId,omitempty"`
		MaxDevices      *IdentityGuestPassCommonIdentityGuestPassSettingsPostRequestMaxDevices      `json:"maxDevices,omitempty"`
		PassEffectSince *string                                                                     `json:"passEffectSince,omitempty"`
		PassUseDays     *float64                                                                    `json:"passUseDays,omitempty"`
		PassValidFor    *IdentityGuestPassCommonIdentityGuestPassSettingsPostRequestPassValidFor    `json:"passValidFor,omitempty"`
		SessionDuration *IdentityGuestPassCommonIdentityGuestPassSettingsPostRequestSessionDuration `json:"sessionDuration,omitempty"`
		Wlan            *IdentityGuestPassCommonIdentityGuestPassSettingsPostRequestWlan            `json:"wlan,omitempty"`
		Zone            *IdentityGuestPassCommonIdentityGuestPassSettingsPostRequestZone            `json:"zone,omitempty"`
	}
)

// IdentityGuestPassCommonIdentityGuestPassSettingsPost: Use this API command to update common identity guest pass settings.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - requestBody: *IdentityGuestPassCommonIdentityGuestPassSettingsPostRequest
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - []byte: Any bytes to be found in response body
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityGuestPassCommonIdentityGuestPassSettingsPost(ctx context.Context, requestBody *IdentityGuestPassCommonIdentityGuestPassSettingsPostRequest) (*http.Response, []byte, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	request := NewRequest("POST", "/v5_0/identity/guestpass/upload/common", true)
	err = request.SetBodyModel(requestBody)
	if err != nil {
		return nil, nil, err
	}
	return i.client.Ensure(ctx, request, 201, nil)
}

// IdentityGuestPassDeleteDelete: Use this API command to delete identity guest pass.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - userId (UUIDv4)
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - []byte: Any bytes to be found in response body
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityGuestPassDeleteDelete(ctx context.Context, userId string) (*http.Response, []byte, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	err = validators.StrIsUUIDv4(userId)
	if nil != err {
		return nil, nil, fmt.Errorf("parameter \"userId\" failed validation check: %s", err)
	}
	request := NewRequest("DELETE", "/v5_0/identity/guestpass/{userId}", true)
	request.SetPathParameter("userId", userId)
	return i.client.Ensure(ctx, request, 204, nil)
}

type (
	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestAttributesSlice []*string

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestExtraFiltersSlice []*IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestExtraFilters

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestExtraFilters struct {
		Operator *string `json:"operator,omitempty"`
		Type     *string `json:"type,omitempty"`
		Value    *string `json:"value,omitempty"`
	}

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestExtraNotFiltersSlice []*IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestExtraNotFilters

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestExtraNotFilters struct {
		Type  *string `json:"type,omitempty"`
		Value *string `json:"value,omitempty"`
	}

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestExtraTimeRange struct {
		End      *float64 `json:"end,omitempty"`
		Field    *string  `json:"field,omitempty"`
		Interval *float64 `json:"interval,omitempty"`
		Start    *float64 `json:"start,omitempty"`
	}

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestFiltersSlice []*IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestFilters

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestFilters struct {
		Operator *string `json:"operator,omitempty"`
		Type     *string `json:"type,omitempty"`
		Value    *string `json:"value,omitempty"`
	}

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestFullTextSearchFieldsSlice []*string

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestFullTextSearch struct {
		Fields IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestFullTextSearchFieldsSlice `json:"fields,omitempty"`
		Type   *string                                                                                        `json:"type,omitempty"`
		Value  *string                                                                                        `json:"value,omitempty"`
	}

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestOptionsGuestPassExpiration struct {
		End      *float64 `json:"end,omitempty"`
		Interval *float64 `json:"interval,omitempty"`
		Start    *float64 `json:"start,omitempty"`
	}

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestOptionsLocalUserAuditTime struct {
		End      *float64 `json:"end,omitempty"`
		Interval *float64 `json:"interval,omitempty"`
		Start    *float64 `json:"start,omitempty"`
	}

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestOptions struct {
		INCLUDERBACMETADATA           *bool                                                                                            `json:"INCLUDE_RBAC_METADATA,omitempty"`
		TENANTID                      *string                                                                                          `json:"TENANT_ID,omitempty"`
		AcctIncludeNa                 *bool                                                                                            `json:"acct_includeNa,omitempty"`
		AcctTestableOnly              *bool                                                                                            `json:"acct_testableOnly,omitempty"`
		AcctType                      *string                                                                                          `json:"acct_type,omitempty"`
		AuthHostedAaaSupportedEnabled *bool                                                                                            `json:"auth_hostedAaaSupportedEnabled,omitempty"`
		AuthIncludeAdGlobal           *bool                                                                                            `json:"auth_includeAdGlobal,omitempty"`
		AuthIncludeGuest              *bool                                                                                            `json:"auth_includeGuest,omitempty"`
		AuthIncludeLocalDb            *bool                                                                                            `json:"auth_includeLocalDb,omitempty"`
		AuthIncludeNa                 *bool                                                                                            `json:"auth_includeNa,omitempty"`
		AuthPlmnIdentifierEnabled     *bool                                                                                            `json:"auth_plmnIdentifierEnabled,omitempty"`
		AuthRealmType                 *string                                                                                          `json:"auth_realmType,omitempty"`
		AuthTestableOnly              *bool                                                                                            `json:"auth_testableOnly,omitempty"`
		AuthType                      *string                                                                                          `json:"auth_type,omitempty"`
		ForwardingType                *string                                                                                          `json:"forwarding_type,omitempty"`
		GlobalFilterID                *string                                                                                          `json:"globalFilterId,omitempty"`
		GuestPassDisplayName          *string                                                                                          `json:"guestPass_displayName,omitempty"`
		GuestPassExpiration           *IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestOptionsGuestPassExpiration `json:"guestPass_expiration,omitempty"`
		GuestPassWlan                 *string                                                                                          `json:"guestPass_wlan,omitempty"`
		InMap                         *bool                                                                                            `json:"inMap,omitempty"`
		IncludeSharedResources        *bool                                                                                            `json:"includeSharedResources,omitempty"`
		IncludeUsers                  *bool                                                                                            `json:"includeUsers,omitempty"`
		LocalUserAuditTime            *IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestOptionsLocalUserAuditTime  `json:"localUser_auditTime,omitempty"`
		LocalUserDisplayName          *string                                                                                          `json:"localUser_displayName,omitempty"`
		LocalUserFirstName            *string                                                                                          `json:"localUser_firstName,omitempty"`
		LocalUserLastName             *string                                                                                          `json:"localUser_lastName,omitempty"`
		LocalUserMailAddress          *string                                                                                          `json:"localUser_mailAddress,omitempty"`
		LocalUserPrimaryPhoneNumber   *string                                                                                          `json:"localUser_primaryPhoneNumber,omitempty"`
		LocalUserStatus               *string                                                                                          `json:"localUser_status,omitempty"`
		LocalUserSubscriberType       *string                                                                                          `json:"localUser_subscriberType,omitempty"`
		LocalUserUserName             *string                                                                                          `json:"localUser_userName,omitempty"`
		LocalUserUserSource           *string                                                                                          `json:"localUser_userSource,omitempty"`
	}

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestSortInfo struct {
		Dir        *string `json:"dir,omitempty"`
		SortColumn *string `json:"sortColumn,omitempty"`
	}

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequest struct {
		Attributes      IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestAttributesSlice      `json:"attributes,omitempty"`
		Criteria        *string                                                                                   `json:"criteria,omitempty"`
		ExpandDomains   *bool                                                                                     `json:"expandDomains,omitempty"`
		ExtraFilters    IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestExtraFiltersSlice    `json:"extraFilters,omitempty"`
		ExtraNotFilters IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestExtraNotFiltersSlice `json:"extraNotFilters,omitempty"`
		ExtraTimeRange  *IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestExtraTimeRange      `json:"extraTimeRange,omitempty"`
		Filters         IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestFiltersSlice         `json:"filters,omitempty"`
		FullTextSearch  *IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestFullTextSearch      `json:"fullTextSearch,omitempty"`
		Limit           *float64                                                                                  `json:"limit,omitempty"`
		Options         *IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestOptions             `json:"options,omitempty"`
		Page            *int                                                                                      `json:"page,omitempty"`
		Query           *string                                                                                   `json:"query,omitempty"`
		SortInfo        *IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequestSortInfo            `json:"sortInfo,omitempty"`
		Start           *float64                                                                                  `json:"start,omitempty"`
	}

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPost200ResponseListSlice []*IdentitySubscriptionPackageRetrieveSubscriptionPackageListPost200ResponseList

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPost200ResponseList struct {
		Description        *string  `json:"description,omitempty"`
		DomainID           *string  `json:"domainId,omitempty"`
		ExpirationInterval *string  `json:"expirationInterval,omitempty"`
		ExpirationValue    *float64 `json:"expirationValue,omitempty"`
		ID                 *string  `json:"id,omitempty"`
		Name               *string  `json:"name,omitempty"`
	}

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListPost200Response struct {
		Extra      *json.RawMessage                                                                   `json:"extra,omitempty"`
		FirstIndex *int                                                                               `json:"firstIndex,omitempty"`
		HasMore    *bool                                                                              `json:"hasMore,omitempty"`
		List       IdentitySubscriptionPackageRetrieveSubscriptionPackageListPost200ResponseListSlice `json:"list,omitempty"`
		TotalCount *int                                                                               `json:"totalCount,omitempty"`
	}
)

// IdentitySubscriptionPackageRetrieveSubscriptionPackageListPost: Use this API command to retrieve a list of subscription package.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - requestBody: *IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequest
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentitySubscriptionPackageRetrieveSubscriptionPackageListPost200Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentitySubscriptionPackageRetrieveSubscriptionPackageListPost(ctx context.Context, requestBody *IdentitySubscriptionPackageRetrieveSubscriptionPackageListPostRequest) (*http.Response, *IdentitySubscriptionPackageRetrieveSubscriptionPackageListPost200Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	request := NewRequest("POST", "/v5_0/identity/packageList", true)
	err = request.SetBodyModel(requestBody)
	if err != nil {
		return nil, nil, err
	}
	out := &IdentitySubscriptionPackageRetrieveSubscriptionPackageListPost200Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 200, out)
	return httpResponse, out, err
}

// IdentitySubscriptionPackageDeleteDelete1: Use this API command to delete multiple subscription packages.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - []byte: Any bytes to be found in response body
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentitySubscriptionPackageDeleteDelete1(ctx context.Context) (*http.Response, []byte, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	request := NewRequest("DELETE", "/v5_0/identity/packages", true)
	return i.client.Ensure(ctx, request, 204, nil)
}

type (
	IdentitySubscriptionPackageRetrieveSubscriptionPackageListGet200ResponseListSlice []*IdentitySubscriptionPackageRetrieveSubscriptionPackageListGet200ResponseList

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListGet200ResponseList struct {
		Description        *string  `json:"description,omitempty"`
		DomainID           *string  `json:"domainId,omitempty"`
		ExpirationInterval *string  `json:"expirationInterval,omitempty"`
		ExpirationValue    *float64 `json:"expirationValue,omitempty"`
		ID                 *string  `json:"id,omitempty"`
		Name               *string  `json:"name,omitempty"`
	}

	IdentitySubscriptionPackageRetrieveSubscriptionPackageListGet200Response struct {
		Extra      *json.RawMessage                                                                  `json:"extra,omitempty"`
		FirstIndex *int                                                                              `json:"firstIndex,omitempty"`
		HasMore    *bool                                                                             `json:"hasMore,omitempty"`
		List       IdentitySubscriptionPackageRetrieveSubscriptionPackageListGet200ResponseListSlice `json:"list,omitempty"`
		TotalCount *int                                                                              `json:"totalCount,omitempty"`
	}
)

// IdentitySubscriptionPackageRetrieveSubscriptionPackageListGet: Use this API command to retrieve a list of subscription package.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentitySubscriptionPackageRetrieveSubscriptionPackageListGet200Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentitySubscriptionPackageRetrieveSubscriptionPackageListGet(ctx context.Context) (*http.Response, *IdentitySubscriptionPackageRetrieveSubscriptionPackageListGet200Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	request := NewRequest("GET", "/v5_0/identity/packages", true)
	out := &IdentitySubscriptionPackageRetrieveSubscriptionPackageListGet200Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 200, out)
	return httpResponse, out, err
}

type (
	IdentitySubscriptionPackageCreatePostRequest struct {
		Description        *string  `json:"description,omitempty"`
		DomainID           *string  `json:"domainId,omitempty"`
		ExpirationInterval *string  `json:"expirationInterval,omitempty"`
		ExpirationValue    *float64 `json:"expirationValue,omitempty"`
		Name               *string  `json:"name,omitempty"`
	}

	IdentitySubscriptionPackageCreatePost201Response struct {
		ID *string `json:"id,omitempty"`
	}
)

// IdentitySubscriptionPackageCreatePost: Use this API command to create subscription package.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - requestBody: *IdentitySubscriptionPackageCreatePostRequest
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentitySubscriptionPackageCreatePost201Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentitySubscriptionPackageCreatePost(ctx context.Context, requestBody *IdentitySubscriptionPackageCreatePostRequest) (*http.Response, *IdentitySubscriptionPackageCreatePost201Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	request := NewRequest("POST", "/v5_0/identity/packages", true)
	err = request.SetBodyModel(requestBody)
	if err != nil {
		return nil, nil, err
	}
	out := &IdentitySubscriptionPackageCreatePost201Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 201, out)
	return httpResponse, out, err
}

// IdentitySubscriptionPackageDeleteDelete: Use this API command to delete subscription package.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - id (UUIDv4): Identity Subscription Package ID
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - []byte: Any bytes to be found in response body
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentitySubscriptionPackageDeleteDelete(ctx context.Context, id string) (*http.Response, []byte, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	err = validators.StrIsUUIDv4(id)
	if nil != err {
		return nil, nil, fmt.Errorf("parameter \"id\" failed validation check: %s", err)
	}
	request := NewRequest("DELETE", "/v5_0/identity/packages/{id}", true)
	request.SetPathParameter("id", id)
	return i.client.Ensure(ctx, request, 204, nil)
}

type (
	IdentitySubscriptionPackageRetrieveGet200Response struct {
		CreateDateTime     *int     `json:"createDateTime,omitempty"`
		CreatorID          *string  `json:"creatorId,omitempty"`
		CreatorUsername    *string  `json:"creatorUsername,omitempty"`
		Description        *string  `json:"description,omitempty"`
		DomainID           *string  `json:"domainId,omitempty"`
		ExpirationInterval *string  `json:"expirationInterval,omitempty"`
		ExpirationValue    *float64 `json:"expirationValue,omitempty"`
		ModifiedDateTime   *int     `json:"modifiedDateTime,omitempty"`
		ModifierID         *string  `json:"modifierId,omitempty"`
		ModifierUsername   *string  `json:"modifierUsername,omitempty"`
		Name               *string  `json:"name,omitempty"`
	}
)

// IdentitySubscriptionPackageRetrieveGet: Use this API command to retrieve subscription package.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - id (UUIDv4): Identity Subscription Package ID
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentitySubscriptionPackageRetrieveGet200Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentitySubscriptionPackageRetrieveGet(ctx context.Context, id string) (*http.Response, *IdentitySubscriptionPackageRetrieveGet200Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	err = validators.StrIsUUIDv4(id)
	if nil != err {
		return nil, nil, fmt.Errorf("parameter \"id\" failed validation check: %s", err)
	}
	request := NewRequest("GET", "/v5_0/identity/packages/{id}", true)
	request.SetPathParameter("id", id)
	out := &IdentitySubscriptionPackageRetrieveGet200Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 200, out)
	return httpResponse, out, err
}

type (
	IdentitySubscriptionPackageModifyBasicPatchRequest struct {
		Description        *string  `json:"description,omitempty"`
		DomainID           *string  `json:"domainId,omitempty"`
		ExpirationInterval *string  `json:"expirationInterval,omitempty"`
		ExpirationValue    *float64 `json:"expirationValue,omitempty"`
		ID                 *string  `json:"id,omitempty"`
		Name               *string  `json:"name,omitempty"`
	}
)

// IdentitySubscriptionPackageModifyBasicPatch: Use this API command to modify the basic information of subscription package.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - id (UUIDv4): Identity Subscription Package ID
// - requestBody: *IdentitySubscriptionPackageModifyBasicPatchRequest
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - []byte: Any bytes to be found in response body
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentitySubscriptionPackageModifyBasicPatch(ctx context.Context, id string, requestBody *IdentitySubscriptionPackageModifyBasicPatchRequest) (*http.Response, []byte, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	err = validators.StrIsUUIDv4(id)
	if nil != err {
		return nil, nil, fmt.Errorf("parameter \"id\" failed validation check: %s", err)
	}
	request := NewRequest("PATCH", "/v5_0/identity/packages/{id}", true)
	err = request.SetBodyModel(requestBody)
	if err != nil {
		return nil, nil, err
	}
	request.SetPathParameter("id", id)
	return i.client.Ensure(ctx, request, 204, nil)
}

type (
	IdentityUserRetrieveIdentityUserListPostRequestAttributesSlice []*string

	IdentityUserRetrieveIdentityUserListPostRequestExtraFiltersSlice []*IdentityUserRetrieveIdentityUserListPostRequestExtraFilters

	IdentityUserRetrieveIdentityUserListPostRequestExtraFilters struct {
		Operator *string `json:"operator,omitempty"`
		Type     *string `json:"type,omitempty"`
		Value    *string `json:"value,omitempty"`
	}

	IdentityUserRetrieveIdentityUserListPostRequestExtraNotFiltersSlice []*IdentityUserRetrieveIdentityUserListPostRequestExtraNotFilters

	IdentityUserRetrieveIdentityUserListPostRequestExtraNotFilters struct {
		Type  *string `json:"type,omitempty"`
		Value *string `json:"value,omitempty"`
	}

	IdentityUserRetrieveIdentityUserListPostRequestExtraTimeRange struct {
		End      *float64 `json:"end,omitempty"`
		Field    *string  `json:"field,omitempty"`
		Interval *float64 `json:"interval,omitempty"`
		Start    *float64 `json:"start,omitempty"`
	}

	IdentityUserRetrieveIdentityUserListPostRequestFiltersSlice []*IdentityUserRetrieveIdentityUserListPostRequestFilters

	IdentityUserRetrieveIdentityUserListPostRequestFilters struct {
		Operator *string `json:"operator,omitempty"`
		Type     *string `json:"type,omitempty"`
		Value    *string `json:"value,omitempty"`
	}

	IdentityUserRetrieveIdentityUserListPostRequestFullTextSearchFieldsSlice []*string

	IdentityUserRetrieveIdentityUserListPostRequestFullTextSearch struct {
		Fields IdentityUserRetrieveIdentityUserListPostRequestFullTextSearchFieldsSlice `json:"fields,omitempty"`
		Type   *string                                                                  `json:"type,omitempty"`
		Value  *string                                                                  `json:"value,omitempty"`
	}

	IdentityUserRetrieveIdentityUserListPostRequestOptionsGuestPassExpiration struct {
		End      *float64 `json:"end,omitempty"`
		Interval *float64 `json:"interval,omitempty"`
		Start    *float64 `json:"start,omitempty"`
	}

	IdentityUserRetrieveIdentityUserListPostRequestOptionsLocalUserAuditTime struct {
		End      *float64 `json:"end,omitempty"`
		Interval *float64 `json:"interval,omitempty"`
		Start    *float64 `json:"start,omitempty"`
	}

	IdentityUserRetrieveIdentityUserListPostRequestOptions struct {
		INCLUDERBACMETADATA           *bool                                                                      `json:"INCLUDE_RBAC_METADATA,omitempty"`
		TENANTID                      *string                                                                    `json:"TENANT_ID,omitempty"`
		AcctIncludeNa                 *bool                                                                      `json:"acct_includeNa,omitempty"`
		AcctTestableOnly              *bool                                                                      `json:"acct_testableOnly,omitempty"`
		AcctType                      *string                                                                    `json:"acct_type,omitempty"`
		AuthHostedAaaSupportedEnabled *bool                                                                      `json:"auth_hostedAaaSupportedEnabled,omitempty"`
		AuthIncludeAdGlobal           *bool                                                                      `json:"auth_includeAdGlobal,omitempty"`
		AuthIncludeGuest              *bool                                                                      `json:"auth_includeGuest,omitempty"`
		AuthIncludeLocalDb            *bool                                                                      `json:"auth_includeLocalDb,omitempty"`
		AuthIncludeNa                 *bool                                                                      `json:"auth_includeNa,omitempty"`
		AuthPlmnIdentifierEnabled     *bool                                                                      `json:"auth_plmnIdentifierEnabled,omitempty"`
		AuthRealmType                 *string                                                                    `json:"auth_realmType,omitempty"`
		AuthTestableOnly              *bool                                                                      `json:"auth_testableOnly,omitempty"`
		AuthType                      *string                                                                    `json:"auth_type,omitempty"`
		ForwardingType                *string                                                                    `json:"forwarding_type,omitempty"`
		GlobalFilterID                *string                                                                    `json:"globalFilterId,omitempty"`
		GuestPassDisplayName          *string                                                                    `json:"guestPass_displayName,omitempty"`
		GuestPassExpiration           *IdentityUserRetrieveIdentityUserListPostRequestOptionsGuestPassExpiration `json:"guestPass_expiration,omitempty"`
		GuestPassWlan                 *string                                                                    `json:"guestPass_wlan,omitempty"`
		InMap                         *bool                                                                      `json:"inMap,omitempty"`
		IncludeSharedResources        *bool                                                                      `json:"includeSharedResources,omitempty"`
		IncludeUsers                  *bool                                                                      `json:"includeUsers,omitempty"`
		LocalUserAuditTime            *IdentityUserRetrieveIdentityUserListPostRequestOptionsLocalUserAuditTime  `json:"localUser_auditTime,omitempty"`
		LocalUserDisplayName          *string                                                                    `json:"localUser_displayName,omitempty"`
		LocalUserFirstName            *string                                                                    `json:"localUser_firstName,omitempty"`
		LocalUserLastName             *string                                                                    `json:"localUser_lastName,omitempty"`
		LocalUserMailAddress          *string                                                                    `json:"localUser_mailAddress,omitempty"`
		LocalUserPrimaryPhoneNumber   *string                                                                    `json:"localUser_primaryPhoneNumber,omitempty"`
		LocalUserStatus               *string                                                                    `json:"localUser_status,omitempty"`
		LocalUserSubscriberType       *string                                                                    `json:"localUser_subscriberType,omitempty"`
		LocalUserUserName             *string                                                                    `json:"localUser_userName,omitempty"`
		LocalUserUserSource           *string                                                                    `json:"localUser_userSource,omitempty"`
	}

	IdentityUserRetrieveIdentityUserListPostRequestSortInfo struct {
		Dir        *string `json:"dir,omitempty"`
		SortColumn *string `json:"sortColumn,omitempty"`
	}

	IdentityUserRetrieveIdentityUserListPostRequest struct {
		Attributes      IdentityUserRetrieveIdentityUserListPostRequestAttributesSlice      `json:"attributes,omitempty"`
		Criteria        *string                                                             `json:"criteria,omitempty"`
		ExpandDomains   *bool                                                               `json:"expandDomains,omitempty"`
		ExtraFilters    IdentityUserRetrieveIdentityUserListPostRequestExtraFiltersSlice    `json:"extraFilters,omitempty"`
		ExtraNotFilters IdentityUserRetrieveIdentityUserListPostRequestExtraNotFiltersSlice `json:"extraNotFilters,omitempty"`
		ExtraTimeRange  *IdentityUserRetrieveIdentityUserListPostRequestExtraTimeRange      `json:"extraTimeRange,omitempty"`
		Filters         IdentityUserRetrieveIdentityUserListPostRequestFiltersSlice         `json:"filters,omitempty"`
		FullTextSearch  *IdentityUserRetrieveIdentityUserListPostRequestFullTextSearch      `json:"fullTextSearch,omitempty"`
		Limit           *float64                                                            `json:"limit,omitempty"`
		Options         *IdentityUserRetrieveIdentityUserListPostRequestOptions             `json:"options,omitempty"`
		Page            *int                                                                `json:"page,omitempty"`
		Query           *string                                                             `json:"query,omitempty"`
		SortInfo        *IdentityUserRetrieveIdentityUserListPostRequestSortInfo            `json:"sortInfo,omitempty"`
		Start           *float64                                                            `json:"start,omitempty"`
	}

	IdentityUserRetrieveIdentityUserListPost200ResponseListSlice []*IdentityUserRetrieveIdentityUserListPost200ResponseList

	IdentityUserRetrieveIdentityUserListPost200ResponseList struct {
		CreatedOn   *string `json:"createdOn,omitempty"`
		DisplayName *string `json:"displayName,omitempty"`
		DomainID    *string `json:"domainId,omitempty"`
		ID          *string `json:"id,omitempty"`
		IsDisabled  *string `json:"isDisabled,omitempty"`
		UserName    *string `json:"userName,omitempty"`
		UserSource  *string `json:"userSource,omitempty"`
		UserType    *string `json:"userType,omitempty"`
	}

	IdentityUserRetrieveIdentityUserListPost200Response struct {
		Extra      *json.RawMessage                                             `json:"extra,omitempty"`
		FirstIndex *int                                                         `json:"firstIndex,omitempty"`
		HasMore    *bool                                                        `json:"hasMore,omitempty"`
		List       IdentityUserRetrieveIdentityUserListPost200ResponseListSlice `json:"list,omitempty"`
		TotalCount *int                                                         `json:"totalCount,omitempty"`
	}
)

// IdentityUserRetrieveIdentityUserListPost: Use this API command to retrieve a list of identity user.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - requestBody: *IdentityUserRetrieveIdentityUserListPostRequest
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentityUserRetrieveIdentityUserListPost200Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserRetrieveIdentityUserListPost(ctx context.Context, requestBody *IdentityUserRetrieveIdentityUserListPostRequest) (*http.Response, *IdentityUserRetrieveIdentityUserListPost200Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	request := NewRequest("POST", "/v5_0/identity/userList", true)
	err = request.SetBodyModel(requestBody)
	if err != nil {
		return nil, nil, err
	}
	out := &IdentityUserRetrieveIdentityUserListPost200Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 200, out)
	return httpResponse, out, err
}

// IdentityUserRoleDeleteMultipleIdentityUserRolesDelete: Use this API command to delete multiple identity user roles.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - []byte: Any bytes to be found in response body
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserRoleDeleteMultipleIdentityUserRolesDelete(ctx context.Context) (*http.Response, []byte, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	request := NewRequest("DELETE", "/v5_0/identity/userrole", true)
	return i.client.Ensure(ctx, request, 204, nil)
}

type (
	IdentityUserRoleRetrieveListGet200ResponseListSlice []*IdentityUserRoleRetrieveListGet200ResponseList

	IdentityUserRoleRetrieveListGet200ResponseListMaxDevices struct {
		MaxDevicesAllowed *string  `json:"maxDevicesAllowed,omitempty"`
		MaxDevicesNumber  *float64 `json:"maxDevicesNumber,omitempty"`
	}

	IdentityUserRoleRetrieveListGet200ResponseListUserTrafficProfile struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityUserRoleRetrieveListGet200ResponseListVlanPooling struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityUserRoleRetrieveListGet200ResponseList struct {
		CreateDateTime     *int                                                              `json:"createDateTime,omitempty"`
		CreatorID          *string                                                           `json:"creatorId,omitempty"`
		CreatorUsername    *string                                                           `json:"creatorUsername,omitempty"`
		Description        *string                                                           `json:"description,omitempty"`
		DomainID           *string                                                           `json:"domainId,omitempty"`
		ID                 *string                                                           `json:"id,omitempty"`
		MaxDevices         *IdentityUserRoleRetrieveListGet200ResponseListMaxDevices         `json:"maxDevices,omitempty"`
		ModifiedDateTime   *int                                                              `json:"modifiedDateTime,omitempty"`
		ModifierID         *string                                                           `json:"modifierId,omitempty"`
		ModifierUsername   *string                                                           `json:"modifierUsername,omitempty"`
		Name               *string                                                           `json:"name,omitempty"`
		UserTrafficProfile *IdentityUserRoleRetrieveListGet200ResponseListUserTrafficProfile `json:"userTrafficProfile,omitempty"`
		VlanID             *float64                                                          `json:"vlanId,omitempty"`
		VlanPooling        *IdentityUserRoleRetrieveListGet200ResponseListVlanPooling        `json:"vlanPooling,omitempty"`
	}

	IdentityUserRoleRetrieveListGet200Response struct {
		Extra      *json.RawMessage                                    `json:"extra,omitempty"`
		FirstIndex *int                                                `json:"firstIndex,omitempty"`
		HasMore    *bool                                               `json:"hasMore,omitempty"`
		List       IdentityUserRoleRetrieveListGet200ResponseListSlice `json:"list,omitempty"`
		TotalCount *int                                                `json:"totalCount,omitempty"`
	}
)

// IdentityUserRoleRetrieveListGet: Use this API command to retrieve a list of identity user role.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentityUserRoleRetrieveListGet200Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserRoleRetrieveListGet(ctx context.Context) (*http.Response, *IdentityUserRoleRetrieveListGet200Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	request := NewRequest("GET", "/v5_0/identity/userrole", true)
	out := &IdentityUserRoleRetrieveListGet200Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 200, out)
	return httpResponse, out, err
}

type (
	IdentityUserRoleCreatePostRequestMaxDevices struct {
		MaxDevicesAllowed *string  `json:"maxDevicesAllowed,omitempty"`
		MaxDevicesNumber  *float64 `json:"maxDevicesNumber,omitempty"`
	}

	IdentityUserRoleCreatePostRequestUserTrafficProfile struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityUserRoleCreatePostRequestVlanPooling struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityUserRoleCreatePostRequest struct {
		Description        *string                                              `json:"description,omitempty"`
		DomainID           *string                                              `json:"domainId,omitempty"`
		MaxDevices         *IdentityUserRoleCreatePostRequestMaxDevices         `json:"maxDevices,omitempty"`
		Name               *string                                              `json:"name,omitempty"`
		UserTrafficProfile *IdentityUserRoleCreatePostRequestUserTrafficProfile `json:"userTrafficProfile,omitempty"`
		VlanID             *float64                                             `json:"vlanId,omitempty"`
		VlanPooling        *IdentityUserRoleCreatePostRequestVlanPooling        `json:"vlanPooling,omitempty"`
	}

	IdentityUserRoleCreatePost201Response struct {
		ID *string `json:"id,omitempty"`
	}
)

// IdentityUserRoleCreatePost: Use this API command to create identity user role.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - requestBody: *IdentityUserRoleCreatePostRequest
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentityUserRoleCreatePost201Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserRoleCreatePost(ctx context.Context, requestBody *IdentityUserRoleCreatePostRequest) (*http.Response, *IdentityUserRoleCreatePost201Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	request := NewRequest("POST", "/v5_0/identity/userrole", true)
	err = request.SetBodyModel(requestBody)
	if err != nil {
		return nil, nil, err
	}
	out := &IdentityUserRoleCreatePost201Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 201, out)
	return httpResponse, out, err
}

type (
	IdentityUserRoleRetrieveListPostRequestAttributesSlice []*string

	IdentityUserRoleRetrieveListPostRequestExtraFiltersSlice []*IdentityUserRoleRetrieveListPostRequestExtraFilters

	IdentityUserRoleRetrieveListPostRequestExtraFilters struct {
		Operator *string `json:"operator,omitempty"`
		Type     *string `json:"type,omitempty"`
		Value    *string `json:"value,omitempty"`
	}

	IdentityUserRoleRetrieveListPostRequestExtraNotFiltersSlice []*IdentityUserRoleRetrieveListPostRequestExtraNotFilters

	IdentityUserRoleRetrieveListPostRequestExtraNotFilters struct {
		Type  *string `json:"type,omitempty"`
		Value *string `json:"value,omitempty"`
	}

	IdentityUserRoleRetrieveListPostRequestExtraTimeRange struct {
		End      *float64 `json:"end,omitempty"`
		Field    *string  `json:"field,omitempty"`
		Interval *float64 `json:"interval,omitempty"`
		Start    *float64 `json:"start,omitempty"`
	}

	IdentityUserRoleRetrieveListPostRequestFiltersSlice []*IdentityUserRoleRetrieveListPostRequestFilters

	IdentityUserRoleRetrieveListPostRequestFilters struct {
		Operator *string `json:"operator,omitempty"`
		Type     *string `json:"type,omitempty"`
		Value    *string `json:"value,omitempty"`
	}

	IdentityUserRoleRetrieveListPostRequestFullTextSearchFieldsSlice []*string

	IdentityUserRoleRetrieveListPostRequestFullTextSearch struct {
		Fields IdentityUserRoleRetrieveListPostRequestFullTextSearchFieldsSlice `json:"fields,omitempty"`
		Type   *string                                                          `json:"type,omitempty"`
		Value  *string                                                          `json:"value,omitempty"`
	}

	IdentityUserRoleRetrieveListPostRequestOptionsGuestPassExpiration struct {
		End      *float64 `json:"end,omitempty"`
		Interval *float64 `json:"interval,omitempty"`
		Start    *float64 `json:"start,omitempty"`
	}

	IdentityUserRoleRetrieveListPostRequestOptionsLocalUserAuditTime struct {
		End      *float64 `json:"end,omitempty"`
		Interval *float64 `json:"interval,omitempty"`
		Start    *float64 `json:"start,omitempty"`
	}

	IdentityUserRoleRetrieveListPostRequestOptions struct {
		INCLUDERBACMETADATA           *bool                                                              `json:"INCLUDE_RBAC_METADATA,omitempty"`
		TENANTID                      *string                                                            `json:"TENANT_ID,omitempty"`
		AcctIncludeNa                 *bool                                                              `json:"acct_includeNa,omitempty"`
		AcctTestableOnly              *bool                                                              `json:"acct_testableOnly,omitempty"`
		AcctType                      *string                                                            `json:"acct_type,omitempty"`
		AuthHostedAaaSupportedEnabled *bool                                                              `json:"auth_hostedAaaSupportedEnabled,omitempty"`
		AuthIncludeAdGlobal           *bool                                                              `json:"auth_includeAdGlobal,omitempty"`
		AuthIncludeGuest              *bool                                                              `json:"auth_includeGuest,omitempty"`
		AuthIncludeLocalDb            *bool                                                              `json:"auth_includeLocalDb,omitempty"`
		AuthIncludeNa                 *bool                                                              `json:"auth_includeNa,omitempty"`
		AuthPlmnIdentifierEnabled     *bool                                                              `json:"auth_plmnIdentifierEnabled,omitempty"`
		AuthRealmType                 *string                                                            `json:"auth_realmType,omitempty"`
		AuthTestableOnly              *bool                                                              `json:"auth_testableOnly,omitempty"`
		AuthType                      *string                                                            `json:"auth_type,omitempty"`
		ForwardingType                *string                                                            `json:"forwarding_type,omitempty"`
		GlobalFilterID                *string                                                            `json:"globalFilterId,omitempty"`
		GuestPassDisplayName          *string                                                            `json:"guestPass_displayName,omitempty"`
		GuestPassExpiration           *IdentityUserRoleRetrieveListPostRequestOptionsGuestPassExpiration `json:"guestPass_expiration,omitempty"`
		GuestPassWlan                 *string                                                            `json:"guestPass_wlan,omitempty"`
		InMap                         *bool                                                              `json:"inMap,omitempty"`
		IncludeSharedResources        *bool                                                              `json:"includeSharedResources,omitempty"`
		IncludeUsers                  *bool                                                              `json:"includeUsers,omitempty"`
		LocalUserAuditTime            *IdentityUserRoleRetrieveListPostRequestOptionsLocalUserAuditTime  `json:"localUser_auditTime,omitempty"`
		LocalUserDisplayName          *string                                                            `json:"localUser_displayName,omitempty"`
		LocalUserFirstName            *string                                                            `json:"localUser_firstName,omitempty"`
		LocalUserLastName             *string                                                            `json:"localUser_lastName,omitempty"`
		LocalUserMailAddress          *string                                                            `json:"localUser_mailAddress,omitempty"`
		LocalUserPrimaryPhoneNumber   *string                                                            `json:"localUser_primaryPhoneNumber,omitempty"`
		LocalUserStatus               *string                                                            `json:"localUser_status,omitempty"`
		LocalUserSubscriberType       *string                                                            `json:"localUser_subscriberType,omitempty"`
		LocalUserUserName             *string                                                            `json:"localUser_userName,omitempty"`
		LocalUserUserSource           *string                                                            `json:"localUser_userSource,omitempty"`
	}

	IdentityUserRoleRetrieveListPostRequestSortInfo struct {
		Dir        *string `json:"dir,omitempty"`
		SortColumn *string `json:"sortColumn,omitempty"`
	}

	IdentityUserRoleRetrieveListPostRequest struct {
		Attributes      IdentityUserRoleRetrieveListPostRequestAttributesSlice      `json:"attributes,omitempty"`
		Criteria        *string                                                     `json:"criteria,omitempty"`
		ExpandDomains   *bool                                                       `json:"expandDomains,omitempty"`
		ExtraFilters    IdentityUserRoleRetrieveListPostRequestExtraFiltersSlice    `json:"extraFilters,omitempty"`
		ExtraNotFilters IdentityUserRoleRetrieveListPostRequestExtraNotFiltersSlice `json:"extraNotFilters,omitempty"`
		ExtraTimeRange  *IdentityUserRoleRetrieveListPostRequestExtraTimeRange      `json:"extraTimeRange,omitempty"`
		Filters         IdentityUserRoleRetrieveListPostRequestFiltersSlice         `json:"filters,omitempty"`
		FullTextSearch  *IdentityUserRoleRetrieveListPostRequestFullTextSearch      `json:"fullTextSearch,omitempty"`
		Limit           *float64                                                    `json:"limit,omitempty"`
		Options         *IdentityUserRoleRetrieveListPostRequestOptions             `json:"options,omitempty"`
		Page            *int                                                        `json:"page,omitempty"`
		Query           *string                                                     `json:"query,omitempty"`
		SortInfo        *IdentityUserRoleRetrieveListPostRequestSortInfo            `json:"sortInfo,omitempty"`
		Start           *float64                                                    `json:"start,omitempty"`
	}

	IdentityUserRoleRetrieveListPost200ResponseListSlice []*IdentityUserRoleRetrieveListPost200ResponseList

	IdentityUserRoleRetrieveListPost200ResponseListMaxDevices struct {
		MaxDevicesAllowed *string  `json:"maxDevicesAllowed,omitempty"`
		MaxDevicesNumber  *float64 `json:"maxDevicesNumber,omitempty"`
	}

	IdentityUserRoleRetrieveListPost200ResponseListUserTrafficProfile struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityUserRoleRetrieveListPost200ResponseListVlanPooling struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityUserRoleRetrieveListPost200ResponseList struct {
		CreateDateTime     *int                                                               `json:"createDateTime,omitempty"`
		CreatorID          *string                                                            `json:"creatorId,omitempty"`
		CreatorUsername    *string                                                            `json:"creatorUsername,omitempty"`
		Description        *string                                                            `json:"description,omitempty"`
		DomainID           *string                                                            `json:"domainId,omitempty"`
		ID                 *string                                                            `json:"id,omitempty"`
		MaxDevices         *IdentityUserRoleRetrieveListPost200ResponseListMaxDevices         `json:"maxDevices,omitempty"`
		ModifiedDateTime   *int                                                               `json:"modifiedDateTime,omitempty"`
		ModifierID         *string                                                            `json:"modifierId,omitempty"`
		ModifierUsername   *string                                                            `json:"modifierUsername,omitempty"`
		Name               *string                                                            `json:"name,omitempty"`
		UserTrafficProfile *IdentityUserRoleRetrieveListPost200ResponseListUserTrafficProfile `json:"userTrafficProfile,omitempty"`
		VlanID             *float64                                                           `json:"vlanId,omitempty"`
		VlanPooling        *IdentityUserRoleRetrieveListPost200ResponseListVlanPooling        `json:"vlanPooling,omitempty"`
	}

	IdentityUserRoleRetrieveListPost200Response struct {
		Extra      *json.RawMessage                                     `json:"extra,omitempty"`
		FirstIndex *int                                                 `json:"firstIndex,omitempty"`
		HasMore    *bool                                                `json:"hasMore,omitempty"`
		List       IdentityUserRoleRetrieveListPost200ResponseListSlice `json:"list,omitempty"`
		TotalCount *int                                                 `json:"totalCount,omitempty"`
	}
)

// IdentityUserRoleRetrieveListPost: Use this API command to retrieve a list of identity user role.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - requestBody: *IdentityUserRoleRetrieveListPostRequest
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentityUserRoleRetrieveListPost200Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserRoleRetrieveListPost(ctx context.Context, requestBody *IdentityUserRoleRetrieveListPostRequest) (*http.Response, *IdentityUserRoleRetrieveListPost200Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	request := NewRequest("POST", "/v5_0/identity/userRoleList", true)
	err = request.SetBodyModel(requestBody)
	if err != nil {
		return nil, nil, err
	}
	out := &IdentityUserRoleRetrieveListPost200Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 200, out)
	return httpResponse, out, err
}

// IdentityUserRoleDeleteDelete: Use this API command to delete identity user role.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - id (UUIDv4): User Role ID
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - []byte: Any bytes to be found in response body
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserRoleDeleteDelete(ctx context.Context, id string) (*http.Response, []byte, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	err = validators.StrIsUUIDv4(id)
	if nil != err {
		return nil, nil, fmt.Errorf("parameter \"id\" failed validation check: %s", err)
	}
	request := NewRequest("DELETE", "/v5_0/identity/userrole/{id}", true)
	request.SetPathParameter("id", id)
	return i.client.Ensure(ctx, request, 204, nil)
}

type (
	IdentityUserRoleRetrieveGet200ResponseMaxDevices struct {
		MaxDevicesAllowed *string  `json:"maxDevicesAllowed,omitempty"`
		MaxDevicesNumber  *float64 `json:"maxDevicesNumber,omitempty"`
	}

	IdentityUserRoleRetrieveGet200ResponseUserTrafficProfile struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityUserRoleRetrieveGet200ResponseVlanPooling struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityUserRoleRetrieveGet200Response struct {
		CreateDateTime     *int                                                      `json:"createDateTime,omitempty"`
		CreatorID          *string                                                   `json:"creatorId,omitempty"`
		CreatorUsername    *string                                                   `json:"creatorUsername,omitempty"`
		Description        *string                                                   `json:"description,omitempty"`
		ID                 *string                                                   `json:"id,omitempty"`
		MaxDevices         *IdentityUserRoleRetrieveGet200ResponseMaxDevices         `json:"maxDevices,omitempty"`
		ModifiedDateTime   *int                                                      `json:"modifiedDateTime,omitempty"`
		ModifierID         *string                                                   `json:"modifierId,omitempty"`
		ModifierUsername   *string                                                   `json:"modifierUsername,omitempty"`
		Name               *string                                                   `json:"name,omitempty"`
		UserTrafficProfile *IdentityUserRoleRetrieveGet200ResponseUserTrafficProfile `json:"userTrafficProfile,omitempty"`
		VlanID             *float64                                                  `json:"vlanId,omitempty"`
		VlanPooling        *IdentityUserRoleRetrieveGet200ResponseVlanPooling        `json:"vlanPooling,omitempty"`
	}
)

// IdentityUserRoleRetrieveGet: Use this API command to retrieve identity user role by ID.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - id (UUIDv4): User Role ID
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentityUserRoleRetrieveGet200Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserRoleRetrieveGet(ctx context.Context, id string) (*http.Response, *IdentityUserRoleRetrieveGet200Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	err = validators.StrIsUUIDv4(id)
	if nil != err {
		return nil, nil, fmt.Errorf("parameter \"id\" failed validation check: %s", err)
	}
	request := NewRequest("GET", "/v5_0/identity/userrole/{id}", true)
	request.SetPathParameter("id", id)
	out := &IdentityUserRoleRetrieveGet200Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 200, out)
	return httpResponse, out, err
}

type (
	IdentityUserRoleModifyBasicPatchRequest struct {
		Description *string  `json:"description,omitempty"`
		DomainID    *string  `json:"domainId,omitempty"`
		ID          *string  `json:"id,omitempty"`
		Name        *string  `json:"name,omitempty"`
		VlanID      *float64 `json:"vlanId,omitempty"`
	}
)

// IdentityUserRoleModifyBasicPatch: Use this API command to modify the basic information of identity user role.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - id (UUIDv4): User Role ID
// - requestBody: *IdentityUserRoleModifyBasicPatchRequest
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - []byte: Any bytes to be found in response body
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserRoleModifyBasicPatch(ctx context.Context, id string, requestBody *IdentityUserRoleModifyBasicPatchRequest) (*http.Response, []byte, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	err = validators.StrIsUUIDv4(id)
	if nil != err {
		return nil, nil, fmt.Errorf("parameter \"id\" failed validation check: %s", err)
	}
	request := NewRequest("PATCH", "/v5_0/identity/userrole/{id}", true)
	err = request.SetBodyModel(requestBody)
	if err != nil {
		return nil, nil, err
	}
	request.SetPathParameter("id", id)
	return i.client.Ensure(ctx, request, 204, nil)
}

type (
	IdentityUserRoleModifyMaxDevicePatchRequest struct {
		MaxDevicesAllowed *string  `json:"maxDevicesAllowed,omitempty"`
		MaxDevicesNumber  *float64 `json:"maxDevicesNumber,omitempty"`
	}
)

// IdentityUserRoleModifyMaxDevicePatch: Use this API command to modify max device allowed of identity user role.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - id (UUIDv4): User Role ID
// - requestBody: *IdentityUserRoleModifyMaxDevicePatchRequest
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - []byte: Any bytes to be found in response body
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserRoleModifyMaxDevicePatch(ctx context.Context, id string, requestBody *IdentityUserRoleModifyMaxDevicePatchRequest) (*http.Response, []byte, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	err = validators.StrIsUUIDv4(id)
	if nil != err {
		return nil, nil, fmt.Errorf("parameter \"id\" failed validation check: %s", err)
	}
	request := NewRequest("PATCH", "/v5_0/identity/userrole/{id}/maxDevices", true)
	err = request.SetBodyModel(requestBody)
	if err != nil {
		return nil, nil, err
	}
	request.SetPathParameter("id", id)
	return i.client.Ensure(ctx, request, 204, nil)
}

type (
	IdentityUserRoleModifyUserTrafficProfilePatchRequest struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}
)

// IdentityUserRoleModifyUserTrafficProfilePatch: Use this API command to modify user traffic profile of identity user role.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - id (UUIDv4): User Role ID
// - requestBody: *IdentityUserRoleModifyUserTrafficProfilePatchRequest
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - []byte: Any bytes to be found in response body
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserRoleModifyUserTrafficProfilePatch(ctx context.Context, id string, requestBody *IdentityUserRoleModifyUserTrafficProfilePatchRequest) (*http.Response, []byte, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	err = validators.StrIsUUIDv4(id)
	if nil != err {
		return nil, nil, fmt.Errorf("parameter \"id\" failed validation check: %s", err)
	}
	request := NewRequest("PATCH", "/v5_0/identity/userrole/{id}/userTrafficProfile", true)
	err = request.SetBodyModel(requestBody)
	if err != nil {
		return nil, nil, err
	}
	request.SetPathParameter("id", id)
	return i.client.Ensure(ctx, request, 204, nil)
}

type (
	IdentityUserRoleModifyVlanPoolingPatchRequest struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}
)

// IdentityUserRoleModifyVlanPoolingPatch: Use this API command to modify VLAN pooling of identity user role.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - id (UUIDv4): User Role ID
// - requestBody: *IdentityUserRoleModifyVlanPoolingPatchRequest
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - []byte: Any bytes to be found in response body
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserRoleModifyVlanPoolingPatch(ctx context.Context, id string, requestBody *IdentityUserRoleModifyVlanPoolingPatchRequest) (*http.Response, []byte, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	err = validators.StrIsUUIDv4(id)
	if nil != err {
		return nil, nil, fmt.Errorf("parameter \"id\" failed validation check: %s", err)
	}
	request := NewRequest("PATCH", "/v5_0/identity/userrole/{id}/vlanPooling", true)
	err = request.SetBodyModel(requestBody)
	if err != nil {
		return nil, nil, err
	}
	request.SetPathParameter("id", id)
	return i.client.Ensure(ctx, request, 204, nil)
}

// IdentityUserDeleteMultipleIdentityUsersDelete: Use this API command to delete multiple identity users.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - []byte: Any bytes to be found in response body
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserDeleteMultipleIdentityUsersDelete(ctx context.Context) (*http.Response, []byte, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	request := NewRequest("DELETE", "/v5_0/identity/users", true)
	return i.client.Ensure(ctx, request, 204, nil)
}

type (
	IdentityUserRetrieveIdentityUserListGet200ResponseListSlice []*IdentityUserRetrieveIdentityUserListGet200ResponseList

	IdentityUserRetrieveIdentityUserListGet200ResponseList struct {
		CreatedOn   *string `json:"createdOn,omitempty"`
		DisplayName *string `json:"displayName,omitempty"`
		DomainID    *string `json:"domainId,omitempty"`
		ID          *string `json:"id,omitempty"`
		IsDisabled  *string `json:"isDisabled,omitempty"`
		UserName    *string `json:"userName,omitempty"`
		UserSource  *string `json:"userSource,omitempty"`
		UserType    *string `json:"userType,omitempty"`
	}

	IdentityUserRetrieveIdentityUserListGet200Response struct {
		Extra      *json.RawMessage                                            `json:"extra,omitempty"`
		FirstIndex *int                                                        `json:"firstIndex,omitempty"`
		HasMore    *bool                                                       `json:"hasMore,omitempty"`
		List       IdentityUserRetrieveIdentityUserListGet200ResponseListSlice `json:"list,omitempty"`
		TotalCount *int                                                        `json:"totalCount,omitempty"`
	}
)

// IdentityUserRetrieveIdentityUserListGet: Use this API command to retrieve a list of identity user.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
//
// Optional Parameter Map:
// - index (integer): The index of the first entry to be retrieved.
// - listSize (integer): The maximum number of entries to be retrieved.
// - timeZone (string): Display created date and time by specified time zone.
// - userName (string): filter identity user list by user name.
// - displayName (string): filter identity user list by display name.
// - firstName (string): filter identity user list by first name.
// - lastName (string): filter identity user list by last name.
// - email (string): filter identity user list by email.
// - phone (string): filter identity user list by phone.
// - userType (string): filter identity user list by user type.
// - userSource (string): filter identity user list by user source.
// - isDisabled (string): filter identity user list by isDisabled.
// - createdOnFrom (string): filter identity user list by created date and time. The start time of created date and time.
// - createdOnTo (string): filter identity user list by created date and time. The end time of created date and time.
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentityUserRetrieveIdentityUserListGet200Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserRetrieveIdentityUserListGet(ctx context.Context, optionalParams map[string]string) (*http.Response, *IdentityUserRetrieveIdentityUserListGet200Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	index, ok := optionalParams["index"]
	if ok {
		err = validators.StrIsPositiveInt(index)
		if nil != err {
			return nil, nil, fmt.Errorf("parameter \"index\" failed validation check: %s", err)
		}
	} else {
		index = "0"
	}
	listSize, ok := optionalParams["listSize"]
	if ok {
		err = validators.StrIsPositiveInt(listSize)
		if nil != err {
			return nil, nil, fmt.Errorf("parameter \"listSize\" failed validation check: %s", err)
		}
	} else {
		listSize = "100"
	}
	timeZone, ok := optionalParams["timeZone"]
	if !ok {
		timeZone = "UTC"
	}
	request := NewRequest("GET", "/v5_0/identity/users", true)
	request.SetQueryParameter("index", index)
	request.SetQueryParameter("listSize", listSize)
	request.SetQueryParameter("timeZone", timeZone)
	request.SetQueryParameter("userName", optionalParams["userName"])
	request.SetQueryParameter("displayName", optionalParams["displayName"])
	request.SetQueryParameter("firstName", optionalParams["firstName"])
	request.SetQueryParameter("lastName", optionalParams["lastName"])
	request.SetQueryParameter("email", optionalParams["email"])
	request.SetQueryParameter("phone", optionalParams["phone"])
	request.SetQueryParameter("userType", optionalParams["userType"])
	request.SetQueryParameter("userSource", optionalParams["userSource"])
	request.SetQueryParameter("isDisabled", optionalParams["isDisabled"])
	request.SetQueryParameter("createdOnFrom", optionalParams["createdOnFrom"])
	request.SetQueryParameter("createdOnTo", optionalParams["createdOnTo"])
	out := &IdentityUserRetrieveIdentityUserListGet200Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 200, out)
	return httpResponse, out, err
}

type (
	IdentityUserCreatePostRequestSubscriberPackage struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityUserCreatePostRequest struct {
		Address           *string                                         `json:"address,omitempty"`
		City              *string                                         `json:"city,omitempty"`
		CountryName       *string                                         `json:"countryName,omitempty"`
		CountryShortName  *string                                         `json:"countryShortName,omitempty"`
		DomainID          *string                                         `json:"domainId,omitempty"`
		Email             *string                                         `json:"email,omitempty"`
		FirstName         *string                                         `json:"firstName,omitempty"`
		IsDisabled        *string                                         `json:"isDisabled,omitempty"`
		LastName          *string                                         `json:"lastName,omitempty"`
		Password          *string                                         `json:"password,omitempty"`
		Phone             *string                                         `json:"phone,omitempty"`
		Remark            *string                                         `json:"remark,omitempty"`
		State             *string                                         `json:"state,omitempty"`
		SubscriberPackage *IdentityUserCreatePostRequestSubscriberPackage `json:"subscriberPackage,omitempty"`
		UserName          *string                                         `json:"userName,omitempty"`
		ZipCode           *string                                         `json:"zipCode,omitempty"`
	}

	IdentityUserCreatePost201Response struct {
		ID *string `json:"id,omitempty"`
	}
)

// IdentityUserCreatePost: Use this API command to create identity user.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - requestBody: *IdentityUserCreatePostRequest
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentityUserCreatePost201Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserCreatePost(ctx context.Context, requestBody *IdentityUserCreatePostRequest) (*http.Response, *IdentityUserCreatePost201Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	request := NewRequest("POST", "/v5_0/identity/users", true)
	err = request.SetBodyModel(requestBody)
	if err != nil {
		return nil, nil, err
	}
	out := &IdentityUserCreatePost201Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 201, out)
	return httpResponse, out, err
}

type (
	IdentityUserRetrieveAaaserverListGet200ResponseListSlice []*IdentityUserRetrieveAaaserverListGet200ResponseList

	IdentityUserRetrieveAaaserverListGet200ResponseList struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityUserRetrieveAaaserverListGet200Response struct {
		FirstIndex *int                                                     `json:"firstIndex,omitempty"`
		HasMore    *bool                                                    `json:"hasMore,omitempty"`
		List       IdentityUserRetrieveAaaserverListGet200ResponseListSlice `json:"list,omitempty"`
		TotalCount *int                                                     `json:"totalCount,omitempty"`
	}
)

// IdentityUserRetrieveAaaserverListGet: Use this API command to retrieve a list of aaa server.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentityUserRetrieveAaaserverListGet200Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserRetrieveAaaserverListGet(ctx context.Context) (*http.Response, *IdentityUserRetrieveAaaserverListGet200Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	request := NewRequest("GET", "/v5_0/identity/users/aaaserver", true)
	out := &IdentityUserRetrieveAaaserverListGet200Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 200, out)
	return httpResponse, out, err
}

type (
	IdentityUserRetrieveCountryListGet200ResponseListSlice []*IdentityUserRetrieveCountryListGet200ResponseList

	IdentityUserRetrieveCountryListGet200ResponseList struct {
		CountryName      *string `json:"countryName,omitempty"`
		CountryShortName *string `json:"countryShortName,omitempty"`
	}

	IdentityUserRetrieveCountryListGet200Response struct {
		FirstIndex *int                                                   `json:"firstIndex,omitempty"`
		HasMore    *bool                                                  `json:"hasMore,omitempty"`
		List       IdentityUserRetrieveCountryListGet200ResponseListSlice `json:"list,omitempty"`
		TotalCount *int                                                   `json:"totalCount,omitempty"`
	}
)

// IdentityUserRetrieveCountryListGet: Use this API command to retrieve a list of countries.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentityUserRetrieveCountryListGet200Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserRetrieveCountryListGet(ctx context.Context) (*http.Response, *IdentityUserRetrieveCountryListGet200Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	request := NewRequest("GET", "/v5_0/identity/users/countries", true)
	out := &IdentityUserRetrieveCountryListGet200Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 200, out)
	return httpResponse, out, err
}

type (
	IdentityUserRetrievePackageListGet200ResponseListSlice []*IdentityUserRetrievePackageListGet200ResponseList

	IdentityUserRetrievePackageListGet200ResponseListSubscriberPackage struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityUserRetrievePackageListGet200ResponseList struct {
		PackageExpiration     *string                                                             `json:"packageExpiration,omitempty"`
		PackageExpirationDate *float64                                                            `json:"packageExpirationDate,omitempty"`
		SubscriberPackage     *IdentityUserRetrievePackageListGet200ResponseListSubscriberPackage `json:"subscriberPackage,omitempty"`
	}

	IdentityUserRetrievePackageListGet200Response struct {
		FirstIndex *int                                                   `json:"firstIndex,omitempty"`
		HasMore    *bool                                                  `json:"hasMore,omitempty"`
		List       IdentityUserRetrievePackageListGet200ResponseListSlice `json:"list,omitempty"`
		TotalCount *int                                                   `json:"totalCount,omitempty"`
	}
)

// IdentityUserRetrievePackageListGet: Use this API command to retrieve a list of packages.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentityUserRetrievePackageListGet200Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserRetrievePackageListGet(ctx context.Context) (*http.Response, *IdentityUserRetrievePackageListGet200Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	request := NewRequest("GET", "/v5_0/identity/users/packages", true)
	out := &IdentityUserRetrievePackageListGet200Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 200, out)
	return httpResponse, out, err
}

// IdentityUserDeleteDelete: Use this API command to delete identity user.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - id (UUIDv4): Identity User ID
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - []byte: Any bytes to be found in response body
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserDeleteDelete(ctx context.Context, id string) (*http.Response, []byte, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	err = validators.StrIsUUIDv4(id)
	if nil != err {
		return nil, nil, fmt.Errorf("parameter \"id\" failed validation check: %s", err)
	}
	request := NewRequest("DELETE", "/v5_0/identity/users/{id}", true)
	request.SetPathParameter("id", id)
	return i.client.Ensure(ctx, request, 204, nil)
}

type (
	IdentityUserRetrieveGet200ResponseCredentialsGuestPassDtoMacAddressListSlice []interface{}

	IdentityUserRetrieveGet200ResponseCredentialsGuestPassDto struct {
		AuthenticationMethod *string                                                                      `json:"authenticationMethod,omitempty"`
		AutoGeneratePassword *bool                                                                        `json:"autoGeneratePassword,omitempty"`
		Comment              *string                                                                      `json:"comment,omitempty"`
		CreationDate         *float64                                                                     `json:"creationDate,omitempty"`
		CreatorID            *string                                                                      `json:"creatorId,omitempty"`
		DisplayName          *string                                                                      `json:"displayName,omitempty"`
		DomainID             *string                                                                      `json:"domainId,omitempty"`
		ExpirationDate       *string                                                                      `json:"expirationDate,omitempty"`
		ExpirationUnit       *string                                                                      `json:"expirationUnit,omitempty"`
		ExpirationValue      *float64                                                                     `json:"expirationValue,omitempty"`
		ExpireAfterIfNotUsed *float64                                                                     `json:"expireAfterIfNotUsed,omitempty"`
		GuestExpiration      *float64                                                                     `json:"guestExpiration,omitempty"`
		Key                  *string                                                                      `json:"key,omitempty"`
		LoginPassword        *string                                                                      `json:"loginPassword,omitempty"`
		MacAddressList       IdentityUserRetrieveGet200ResponseCredentialsGuestPassDtoMacAddressListSlice `json:"macAddressList,omitempty"`
		MaxDevices           *float64                                                                     `json:"maxDevices,omitempty"`
		ServiceProviderID    *string                                                                      `json:"serviceProviderId,omitempty"`
		SessionUnit          *string                                                                      `json:"sessionUnit,omitempty"`
		SessionValue         *float64                                                                     `json:"sessionValue,omitempty"`
		UserKey              *string                                                                      `json:"userKey,omitempty"`
		UserName             *string                                                                      `json:"userName,omitempty"`
		Wlan                 *string                                                                      `json:"wlan,omitempty"`
		WlanName             *string                                                                      `json:"wlanName,omitempty"`
	}

	IdentityUserRetrieveGet200ResponseSubscriberPackage struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}

	IdentityUserRetrieveGet200ResponseUsernamePasswordCredentialsImplDtoAuthenticationServerConfig struct {
		AUTHENTICATIONSERVERID   *string `json:"AUTHENTICATION_SERVER_ID,omitempty"`
		AUTHENTICATIONSERVERNAME *string `json:"AUTHENTICATION_SERVER_NAME,omitempty"`
		AUTHENTICATIONSERVERTYPE *string `json:"AUTHENTICATION_SERVER_TYPE,omitempty"`
		ID                       *string `json:"id,omitempty"`
		Local                    *bool   `json:"local,omitempty"`
		Name                     *string `json:"name,omitempty"`
		Type                     *string `json:"type,omitempty"`
	}

	IdentityUserRetrieveGet200ResponseUsernamePasswordCredentialsImplDto struct {
		AuthenticationMethod       *string                                                                                         `json:"authenticationMethod,omitempty"`
		AuthenticationServerConfig *IdentityUserRetrieveGet200ResponseUsernamePasswordCredentialsImplDtoAuthenticationServerConfig `json:"authenticationServerConfig,omitempty"`
		CreationDate               *float64                                                                                        `json:"creationDate,omitempty"`
		ExpirationDate             *float64                                                                                        `json:"expirationDate,omitempty"`
		Key                        *string                                                                                         `json:"key,omitempty"`
		LoginName                  *string                                                                                         `json:"loginName,omitempty"`
		LoginPassword              *string                                                                                         `json:"loginPassword,omitempty"`
		PasswordCreation           *string                                                                                         `json:"passwordCreation,omitempty"`
		PasswordExpiration         *string                                                                                         `json:"passwordExpiration,omitempty"`
		ServiceProviderID          *string                                                                                         `json:"serviceProviderId,omitempty"`
	}

	IdentityUserRetrieveGet200Response struct {
		Address                            *string                                                               `json:"address,omitempty"`
		City                               *string                                                               `json:"city,omitempty"`
		CountryName                        *string                                                               `json:"countryName,omitempty"`
		CountryShortName                   *string                                                               `json:"countryShortName,omitempty"`
		CreateDateTime                     *int                                                                  `json:"createDateTime,omitempty"`
		CreatorID                          *string                                                               `json:"creatorId,omitempty"`
		CreatorUsername                    *string                                                               `json:"creatorUsername,omitempty"`
		CredentialsGuestPassDto            *IdentityUserRetrieveGet200ResponseCredentialsGuestPassDto            `json:"credentialsGuestPassDto,omitempty"`
		Email                              *string                                                               `json:"email,omitempty"`
		FirstName                          *string                                                               `json:"firstName,omitempty"`
		IsDisabled                         *string                                                               `json:"isDisabled,omitempty"`
		LastName                           *string                                                               `json:"lastName,omitempty"`
		ModifiedDateTime                   *int                                                                  `json:"modifiedDateTime,omitempty"`
		ModifierID                         *string                                                               `json:"modifierId,omitempty"`
		ModifierUsername                   *string                                                               `json:"modifierUsername,omitempty"`
		PackageExpirationDate              *float64                                                              `json:"packageExpirationDate,omitempty"`
		PackageExpirationInterval          *string                                                               `json:"packageExpirationInterval,omitempty"`
		PackageExpirationValue             *float64                                                              `json:"packageExpirationValue,omitempty"`
		PackageStatus                      *string                                                               `json:"packageStatus,omitempty"`
		Password                           *string                                                               `json:"password,omitempty"`
		Phone                              *string                                                               `json:"phone,omitempty"`
		Remark                             *string                                                               `json:"remark,omitempty"`
		State                              *string                                                               `json:"state,omitempty"`
		SubscriberPackage                  *IdentityUserRetrieveGet200ResponseSubscriberPackage                  `json:"subscriberPackage,omitempty"`
		UserName                           *string                                                               `json:"userName,omitempty"`
		UsernamePasswordCredentialsImplDto *IdentityUserRetrieveGet200ResponseUsernamePasswordCredentialsImplDto `json:"usernamePasswordCredentialsImplDto,omitempty"`
		ZipCode                            *string                                                               `json:"zipCode,omitempty"`
	}
)

// IdentityUserRetrieveGet: Use this API command to retrieve identity user.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - id (UUIDv4): Identity User ID
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - *IdentityUserRetrieveGet200Response
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserRetrieveGet(ctx context.Context, id string) (*http.Response, *IdentityUserRetrieveGet200Response, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	err = validators.StrIsUUIDv4(id)
	if nil != err {
		return nil, nil, fmt.Errorf("parameter \"id\" failed validation check: %s", err)
	}
	request := NewRequest("GET", "/v5_0/identity/users/{id}", true)
	request.SetPathParameter("id", id)
	out := &IdentityUserRetrieveGet200Response{}
	httpResponse, _, err := i.client.Ensure(ctx, request, 200, out)
	return httpResponse, out, err
}

type (
	IdentityUserModifyBasicPatchRequest struct {
		Address          *string `json:"address,omitempty"`
		City             *string `json:"city,omitempty"`
		CountryName      *string `json:"countryName,omitempty"`
		CountryShortName *string `json:"countryShortName,omitempty"`
		DomainID         *string `json:"domainId,omitempty"`
		Email            *string `json:"email,omitempty"`
		FirstName        *string `json:"firstName,omitempty"`
		ID               *string `json:"id,omitempty"`
		IsDisabled       *string `json:"isDisabled,omitempty"`
		LastName         *string `json:"lastName,omitempty"`
		Password         *string `json:"password,omitempty"`
		Phone            *string `json:"phone,omitempty"`
		Remark           *string `json:"remark,omitempty"`
		State            *string `json:"state,omitempty"`
		ZipCode          *string `json:"zipCode,omitempty"`
	}
)

// IdentityUserModifyBasicPatch: Use this API command to modify the basic information of identity user.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - id (UUIDv4): Identity User ID
// - requestBody: *IdentityUserModifyBasicPatchRequest
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - []byte: Any bytes to be found in response body
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserModifyBasicPatch(ctx context.Context, id string, requestBody *IdentityUserModifyBasicPatchRequest) (*http.Response, []byte, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	err = validators.StrIsUUIDv4(id)
	if nil != err {
		return nil, nil, fmt.Errorf("parameter \"id\" failed validation check: %s", err)
	}
	request := NewRequest("PATCH", "/v5_0/identity/users/{id}", true)
	err = request.SetBodyModel(requestBody)
	if err != nil {
		return nil, nil, err
	}
	request.SetPathParameter("id", id)
	return i.client.Ensure(ctx, request, 204, nil)
}

type (
	IdentityUserModifySubscriberPackagePatchRequest struct {
		ID   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}
)

// IdentityUserModifySubscriberPackagePatch: Use this API command to modify subscriber package.
//
// Required Parameters:
// - ctx (context.Context): Context to use for this request
// - id (UUIDv4): Identity User ID
// - requestBody: *IdentityUserModifySubscriberPackagePatchRequest
//
// Returns:
// - *http.Response: HTTP Response or nil on error
// - []byte: Any bytes to be found in response body
// - error: Error seen or nil if none
func (i *IdentityAPI) IdentityUserModifySubscriberPackagePatch(ctx context.Context, id string, requestBody *IdentityUserModifySubscriberPackagePatchRequest) (*http.Response, []byte, error) {
	if ctx == nil {
		return nil, nil, errors.New("user context cannot be nil")
	}
	var err error
	err = validators.StrIsUUIDv4(id)
	if nil != err {
		return nil, nil, fmt.Errorf("parameter \"id\" failed validation check: %s", err)
	}
	request := NewRequest("PATCH", "/v5_0/identity/users/{id}/subscriberPackage", true)
	err = request.SetBodyModel(requestBody)
	if err != nil {
		return nil, nil, err
	}
	request.SetPathParameter("id", id)
	return i.client.Ensure(ctx, request, 204, nil)
}
